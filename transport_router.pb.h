// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_transport_5frouter_2eproto_metadata_getter(int index);
namespace proto {
class RouteFinderData;
struct RouteFinderDataDefaultTypeInternal;
extern RouteFinderDataDefaultTypeInternal _RouteFinderData_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class RouteInternalDataArray;
struct RouteInternalDataArrayDefaultTypeInternal;
extern RouteInternalDataArrayDefaultTypeInternal _RouteInternalDataArray_default_instance_;
class RoutesInternalData;
struct RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::RouteFinderData* Arena::CreateMaybeMessage<::proto::RouteFinderData>(Arena*);
template<> ::proto::RouteInternalData* Arena::CreateMaybeMessage<::proto::RouteInternalData>(Arena*);
template<> ::proto::RouteInternalDataArray* Arena::CreateMaybeMessage<::proto::RouteInternalDataArray>(Arena*);
template<> ::proto::RoutesInternalData* Arena::CreateMaybeMessage<::proto::RoutesInternalData>(Arena*);
template<> ::proto::RoutingSettings* Arena::CreateMaybeMessage<::proto::RoutingSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class RoutingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  virtual ~RoutingSettings();
  explicit constexpr RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return CreateMaybeMessage<RoutingSettings>(nullptr);
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingSettings& from);
  void MergeFrom(const RoutingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5frouter_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // uint32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bus_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  virtual ~RouteInternalData();
  explicit constexpr RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalData* New() const final {
    return CreateMaybeMessage<RouteInternalData>(nullptr);
  }

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInternalData& from);
  void MergeFrom(const RouteInternalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5frouter_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
  };
  // .proto.Weight weight = 1;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::proto::Weight& weight() const;
  ::proto::Weight* release_weight();
  ::proto::Weight* mutable_weight();
  void set_allocated_weight(::proto::Weight* weight);
  private:
  const ::proto::Weight& _internal_weight() const;
  ::proto::Weight* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::proto::Weight* weight);
  ::proto::Weight* unsafe_arena_release_weight();

  // .proto.EdgeId prevEdge = 2;
  bool has_prevedge() const;
  private:
  bool _internal_has_prevedge() const;
  public:
  void clear_prevedge();
  const ::proto::EdgeId& prevedge() const;
  ::proto::EdgeId* release_prevedge();
  ::proto::EdgeId* mutable_prevedge();
  void set_allocated_prevedge(::proto::EdgeId* prevedge);
  private:
  const ::proto::EdgeId& _internal_prevedge() const;
  ::proto::EdgeId* _internal_mutable_prevedge();
  public:
  void unsafe_arena_set_allocated_prevedge(
      ::proto::EdgeId* prevedge);
  ::proto::EdgeId* unsafe_arena_release_prevedge();

  // @@protoc_insertion_point(class_scope:proto.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Weight* weight_;
  ::proto::EdgeId* prevedge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalDataArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RouteInternalDataArray) */ {
 public:
  inline RouteInternalDataArray() : RouteInternalDataArray(nullptr) {}
  virtual ~RouteInternalDataArray();
  explicit constexpr RouteInternalDataArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalDataArray(const RouteInternalDataArray& from);
  RouteInternalDataArray(RouteInternalDataArray&& from) noexcept
    : RouteInternalDataArray() {
    *this = ::std::move(from);
  }

  inline RouteInternalDataArray& operator=(const RouteInternalDataArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalDataArray& operator=(RouteInternalDataArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInternalDataArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalDataArray* internal_default_instance() {
    return reinterpret_cast<const RouteInternalDataArray*>(
               &_RouteInternalDataArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RouteInternalDataArray& a, RouteInternalDataArray& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalDataArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalDataArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalDataArray* New() const final {
    return CreateMaybeMessage<RouteInternalDataArray>(nullptr);
  }

  RouteInternalDataArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalDataArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInternalDataArray& from);
  void MergeFrom(const RouteInternalDataArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalDataArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RouteInternalDataArray";
  }
  protected:
  explicit RouteInternalDataArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5frouter_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated .proto.RouteInternalData vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  ::proto::RouteInternalData* mutable_vector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalData >*
      mutable_vector();
  private:
  const ::proto::RouteInternalData& _internal_vector(int index) const;
  ::proto::RouteInternalData* _internal_add_vector();
  public:
  const ::proto::RouteInternalData& vector(int index) const;
  ::proto::RouteInternalData* add_vector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalData >&
      vector() const;

  // @@protoc_insertion_point(class_scope:proto.RouteInternalDataArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalData > vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  virtual ~RoutesInternalData();
  explicit constexpr RoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutesInternalData* New() const final {
    return CreateMaybeMessage<RoutesInternalData>(nullptr);
  }

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutesInternalData& from);
  void MergeFrom(const RoutesInternalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5frouter_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated .proto.RouteInternalDataArray vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  ::proto::RouteInternalDataArray* mutable_vector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalDataArray >*
      mutable_vector();
  private:
  const ::proto::RouteInternalDataArray& _internal_vector(int index) const;
  ::proto::RouteInternalDataArray* _internal_add_vector();
  public:
  const ::proto::RouteInternalDataArray& vector(int index) const;
  ::proto::RouteInternalDataArray* add_vector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalDataArray >&
      vector() const;

  // @@protoc_insertion_point(class_scope:proto.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalDataArray > vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteFinderData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RouteFinderData) */ {
 public:
  inline RouteFinderData() : RouteFinderData(nullptr) {}
  virtual ~RouteFinderData();
  explicit constexpr RouteFinderData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteFinderData(const RouteFinderData& from);
  RouteFinderData(RouteFinderData&& from) noexcept
    : RouteFinderData() {
    *this = ::std::move(from);
  }

  inline RouteFinderData& operator=(const RouteFinderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteFinderData& operator=(RouteFinderData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteFinderData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteFinderData* internal_default_instance() {
    return reinterpret_cast<const RouteFinderData*>(
               &_RouteFinderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteFinderData& a, RouteFinderData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteFinderData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteFinderData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteFinderData* New() const final {
    return CreateMaybeMessage<RouteFinderData>(nullptr);
  }

  RouteFinderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteFinderData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteFinderData& from);
  void MergeFrom(const RouteFinderData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteFinderData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RouteFinderData";
  }
  protected:
  explicit RouteFinderData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5frouter_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .proto.RoutesInternalData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::proto::RoutesInternalData& data() const;
  ::proto::RoutesInternalData* release_data();
  ::proto::RoutesInternalData* mutable_data();
  void set_allocated_data(::proto::RoutesInternalData* data);
  private:
  const ::proto::RoutesInternalData& _internal_data() const;
  ::proto::RoutesInternalData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::proto::RoutesInternalData* data);
  ::proto::RoutesInternalData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:proto.RouteFinderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::RoutesInternalData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// uint32 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingSettings::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:proto.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:proto.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:proto.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:proto.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// RouteInternalData

// .proto.Weight weight = 1;
inline bool RouteInternalData::_internal_has_weight() const {
  return this != internal_default_instance() && weight_ != nullptr;
}
inline bool RouteInternalData::has_weight() const {
  return _internal_has_weight();
}
inline const ::proto::Weight& RouteInternalData::_internal_weight() const {
  const ::proto::Weight* p = weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Weight&>(
      ::proto::_Weight_default_instance_);
}
inline const ::proto::Weight& RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:proto.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::unsafe_arena_set_allocated_weight(
    ::proto::Weight* weight) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RouteInternalData.weight)
}
inline ::proto::Weight* RouteInternalData::release_weight() {
  
  ::proto::Weight* temp = weight_;
  weight_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Weight* RouteInternalData::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:proto.RouteInternalData.weight)
  
  ::proto::Weight* temp = weight_;
  weight_ = nullptr;
  return temp;
}
inline ::proto::Weight* RouteInternalData::_internal_mutable_weight() {
  
  if (weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Weight>(GetArena());
    weight_ = p;
  }
  return weight_;
}
inline ::proto::Weight* RouteInternalData::mutable_weight() {
  // @@protoc_insertion_point(field_mutable:proto.RouteInternalData.weight)
  return _internal_mutable_weight();
}
inline void RouteInternalData::set_allocated_weight(::proto::Weight* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight)->GetArena();
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:proto.RouteInternalData.weight)
}

// .proto.EdgeId prevEdge = 2;
inline bool RouteInternalData::_internal_has_prevedge() const {
  return this != internal_default_instance() && prevedge_ != nullptr;
}
inline bool RouteInternalData::has_prevedge() const {
  return _internal_has_prevedge();
}
inline const ::proto::EdgeId& RouteInternalData::_internal_prevedge() const {
  const ::proto::EdgeId* p = prevedge_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::EdgeId&>(
      ::proto::_EdgeId_default_instance_);
}
inline const ::proto::EdgeId& RouteInternalData::prevedge() const {
  // @@protoc_insertion_point(field_get:proto.RouteInternalData.prevEdge)
  return _internal_prevedge();
}
inline void RouteInternalData::unsafe_arena_set_allocated_prevedge(
    ::proto::EdgeId* prevedge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prevedge_);
  }
  prevedge_ = prevedge;
  if (prevedge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RouteInternalData.prevEdge)
}
inline ::proto::EdgeId* RouteInternalData::release_prevedge() {
  
  ::proto::EdgeId* temp = prevedge_;
  prevedge_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::EdgeId* RouteInternalData::unsafe_arena_release_prevedge() {
  // @@protoc_insertion_point(field_release:proto.RouteInternalData.prevEdge)
  
  ::proto::EdgeId* temp = prevedge_;
  prevedge_ = nullptr;
  return temp;
}
inline ::proto::EdgeId* RouteInternalData::_internal_mutable_prevedge() {
  
  if (prevedge_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::EdgeId>(GetArena());
    prevedge_ = p;
  }
  return prevedge_;
}
inline ::proto::EdgeId* RouteInternalData::mutable_prevedge() {
  // @@protoc_insertion_point(field_mutable:proto.RouteInternalData.prevEdge)
  return _internal_mutable_prevedge();
}
inline void RouteInternalData::set_allocated_prevedge(::proto::EdgeId* prevedge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prevedge_);
  }
  if (prevedge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prevedge)->GetArena();
    if (message_arena != submessage_arena) {
      prevedge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prevedge, submessage_arena);
    }
    
  } else {
    
  }
  prevedge_ = prevedge;
  // @@protoc_insertion_point(field_set_allocated:proto.RouteInternalData.prevEdge)
}

// -------------------------------------------------------------------

// RouteInternalDataArray

// repeated .proto.RouteInternalData vector = 1;
inline int RouteInternalDataArray::_internal_vector_size() const {
  return vector_.size();
}
inline int RouteInternalDataArray::vector_size() const {
  return _internal_vector_size();
}
inline void RouteInternalDataArray::clear_vector() {
  vector_.Clear();
}
inline ::proto::RouteInternalData* RouteInternalDataArray::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RouteInternalDataArray.vector)
  return vector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalData >*
RouteInternalDataArray::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:proto.RouteInternalDataArray.vector)
  return &vector_;
}
inline const ::proto::RouteInternalData& RouteInternalDataArray::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline const ::proto::RouteInternalData& RouteInternalDataArray::vector(int index) const {
  // @@protoc_insertion_point(field_get:proto.RouteInternalDataArray.vector)
  return _internal_vector(index);
}
inline ::proto::RouteInternalData* RouteInternalDataArray::_internal_add_vector() {
  return vector_.Add();
}
inline ::proto::RouteInternalData* RouteInternalDataArray::add_vector() {
  // @@protoc_insertion_point(field_add:proto.RouteInternalDataArray.vector)
  return _internal_add_vector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalData >&
RouteInternalDataArray::vector() const {
  // @@protoc_insertion_point(field_list:proto.RouteInternalDataArray.vector)
  return vector_;
}

// -------------------------------------------------------------------

// RoutesInternalData

// repeated .proto.RouteInternalDataArray vector = 1;
inline int RoutesInternalData::_internal_vector_size() const {
  return vector_.size();
}
inline int RoutesInternalData::vector_size() const {
  return _internal_vector_size();
}
inline void RoutesInternalData::clear_vector() {
  vector_.Clear();
}
inline ::proto::RouteInternalDataArray* RoutesInternalData::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RoutesInternalData.vector)
  return vector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalDataArray >*
RoutesInternalData::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:proto.RoutesInternalData.vector)
  return &vector_;
}
inline const ::proto::RouteInternalDataArray& RoutesInternalData::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline const ::proto::RouteInternalDataArray& RoutesInternalData::vector(int index) const {
  // @@protoc_insertion_point(field_get:proto.RoutesInternalData.vector)
  return _internal_vector(index);
}
inline ::proto::RouteInternalDataArray* RoutesInternalData::_internal_add_vector() {
  return vector_.Add();
}
inline ::proto::RouteInternalDataArray* RoutesInternalData::add_vector() {
  // @@protoc_insertion_point(field_add:proto.RoutesInternalData.vector)
  return _internal_add_vector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RouteInternalDataArray >&
RoutesInternalData::vector() const {
  // @@protoc_insertion_point(field_list:proto.RoutesInternalData.vector)
  return vector_;
}

// -------------------------------------------------------------------

// RouteFinderData

// .proto.RoutesInternalData data = 1;
inline bool RouteFinderData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RouteFinderData::has_data() const {
  return _internal_has_data();
}
inline void RouteFinderData::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::proto::RoutesInternalData& RouteFinderData::_internal_data() const {
  const ::proto::RoutesInternalData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RoutesInternalData&>(
      ::proto::_RoutesInternalData_default_instance_);
}
inline const ::proto::RoutesInternalData& RouteFinderData::data() const {
  // @@protoc_insertion_point(field_get:proto.RouteFinderData.data)
  return _internal_data();
}
inline void RouteFinderData::unsafe_arena_set_allocated_data(
    ::proto::RoutesInternalData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RouteFinderData.data)
}
inline ::proto::RoutesInternalData* RouteFinderData::release_data() {
  
  ::proto::RoutesInternalData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::RoutesInternalData* RouteFinderData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:proto.RouteFinderData.data)
  
  ::proto::RoutesInternalData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::proto::RoutesInternalData* RouteFinderData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RoutesInternalData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::proto::RoutesInternalData* RouteFinderData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:proto.RouteFinderData.data)
  return _internal_mutable_data();
}
inline void RouteFinderData::set_allocated_data(::proto::RoutesInternalData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:proto.RouteFinderData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
