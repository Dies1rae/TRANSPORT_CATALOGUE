// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "svg.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(int index);
namespace proto {
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Coordinates* Arena::CreateMaybeMessage<::proto::Coordinates>(Arena*);
template<> ::proto::Distance* Arena::CreateMaybeMessage<::proto::Distance>(Arena*);
template<> ::proto::Route* Arena::CreateMaybeMessage<::proto::Route>(Arena*);
template<> ::proto::Stop* Arena::CreateMaybeMessage<::proto::Stop>(Arena*);
template<> ::proto::TransportCatalogue* Arena::CreateMaybeMessage<::proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  virtual ~Coordinates();
  explicit constexpr Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .proto.Coordinates place = 2;
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  const ::proto::Coordinates& place() const;
  ::proto::Coordinates* release_place();
  ::proto::Coordinates* mutable_place();
  void set_allocated_place(::proto::Coordinates* place);
  private:
  const ::proto::Coordinates& _internal_place() const;
  ::proto::Coordinates* _internal_mutable_place();
  public:
  void unsafe_arena_set_allocated_place(
      ::proto::Coordinates* place);
  ::proto::Coordinates* unsafe_arena_release_place();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Coordinates* place_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  virtual ~Route();
  explicit constexpr Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 2,
    kNameFieldNumber = 1,
    kDirectLengthFieldNumber = 4,
    kCycledFieldNumber = 3,
    kLengthFieldNumber = 5,
    kCurvatureFieldNumber = 6,
    kUniqueStopCountFieldNumber = 7,
  };
  // repeated uint32 stop_id = 2;
  int stop_id_size() const;
  private:
  int _internal_stop_id_size() const;
  public:
  void clear_stop_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stop_id() const;
  void _internal_add_stop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stop_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_id(int index) const;
  void set_stop_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stop_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stop_id();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double direct_length = 4;
  void clear_direct_length();
  double direct_length() const;
  void set_direct_length(double value);
  private:
  double _internal_direct_length() const;
  void _internal_set_direct_length(double value);
  public:

  // bool cycled = 3;
  void clear_cycled();
  bool cycled() const;
  void set_cycled(bool value);
  private:
  bool _internal_cycled() const;
  void _internal_set_cycled(bool value);
  public:

  // uint32 length = 5;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double curvature = 6;
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // uint32 unique_stop_count = 7;
  void clear_unique_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count() const;
  void set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_stop_count() const;
  void _internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stop_id_;
  mutable std::atomic<int> _stop_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double direct_length_;
  bool cycled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  double curvature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  virtual ~Distance();
  explicit constexpr Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distance* New() const final {
    return CreateMaybeMessage<Distance>(nullptr);
  }

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distance& from);
  void MergeFrom(const Distance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kMetersFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 meters = 3;
  void clear_meters();
  ::PROTOBUF_NAMESPACE_ID::uint32 meters() const;
  void set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meters() const;
  void _internal_set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  virtual ~TransportCatalogue();
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return CreateMaybeMessage<TransportCatalogue>(nullptr);
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalogue& from);
  void MergeFrom(const TransportCatalogue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNamesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRoutesFieldNumber = 4,
    kResFieldNumber = 5,
    kRusFieldNumber = 6,
    kNavigationDataFieldNumber = 7,
  };
  // repeated string stop_names = 1;
  int stop_names_size() const;
  private:
  int _internal_stop_names_size() const;
  public:
  void clear_stop_names();
  const std::string& stop_names(int index) const;
  std::string* mutable_stop_names(int index);
  void set_stop_names(int index, const std::string& value);
  void set_stop_names(int index, std::string&& value);
  void set_stop_names(int index, const char* value);
  void set_stop_names(int index, const char* value, size_t size);
  std::string* add_stop_names();
  void add_stop_names(const std::string& value);
  void add_stop_names(std::string&& value);
  void add_stop_names(const char* value);
  void add_stop_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stop_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stop_names();
  private:
  const std::string& _internal_stop_names(int index) const;
  std::string* _internal_add_stop_names();
  public:

  // repeated .proto.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stops();
  private:
  const ::proto::Stop& _internal_stops(int index) const;
  ::proto::Stop* _internal_add_stops();
  public:
  const ::proto::Stop& stops(int index) const;
  ::proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stops() const;

  // repeated .proto.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::proto::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
      mutable_distances();
  private:
  const ::proto::Distance& _internal_distances(int index) const;
  ::proto::Distance* _internal_add_distances();
  public:
  const ::proto::Distance& distances(int index) const;
  ::proto::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
      distances() const;

  // repeated .proto.Route routes = 4;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::proto::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Route >*
      mutable_routes();
  private:
  const ::proto::Route& _internal_routes(int index) const;
  ::proto::Route* _internal_add_routes();
  public:
  const ::proto::Route& routes(int index) const;
  ::proto::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Route >&
      routes() const;

  // .proto.RenderSettings res = 5;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::proto::RenderSettings& res() const;
  ::proto::RenderSettings* release_res();
  ::proto::RenderSettings* mutable_res();
  void set_allocated_res(::proto::RenderSettings* res);
  private:
  const ::proto::RenderSettings& _internal_res() const;
  ::proto::RenderSettings* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::proto::RenderSettings* res);
  ::proto::RenderSettings* unsafe_arena_release_res();

  // .proto.RoutingSettings rus = 6;
  bool has_rus() const;
  private:
  bool _internal_has_rus() const;
  public:
  void clear_rus();
  const ::proto::RoutingSettings& rus() const;
  ::proto::RoutingSettings* release_rus();
  ::proto::RoutingSettings* mutable_rus();
  void set_allocated_rus(::proto::RoutingSettings* rus);
  private:
  const ::proto::RoutingSettings& _internal_rus() const;
  ::proto::RoutingSettings* _internal_mutable_rus();
  public:
  void unsafe_arena_set_allocated_rus(
      ::proto::RoutingSettings* rus);
  ::proto::RoutingSettings* unsafe_arena_release_rus();

  // .proto.RouteFinderData navigationData = 7;
  bool has_navigationdata() const;
  private:
  bool _internal_has_navigationdata() const;
  public:
  void clear_navigationdata();
  const ::proto::RouteFinderData& navigationdata() const;
  ::proto::RouteFinderData* release_navigationdata();
  ::proto::RouteFinderData* mutable_navigationdata();
  void set_allocated_navigationdata(::proto::RouteFinderData* navigationdata);
  private:
  const ::proto::RouteFinderData& _internal_navigationdata() const;
  ::proto::RouteFinderData* _internal_mutable_navigationdata();
  public:
  void unsafe_arena_set_allocated_navigationdata(
      ::proto::RouteFinderData* navigationdata);
  ::proto::RouteFinderData* unsafe_arena_release_navigationdata();

  // @@protoc_insertion_point(class_scope:proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stop_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance > distances_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Route > routes_;
  ::proto::RenderSettings* res_;
  ::proto::RoutingSettings* rus_;
  ::proto::RouteFinderData* navigationdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:proto.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:proto.Coordinates.lat)
}

// double lon = 2;
inline void Coordinates::clear_lon() {
  lon_ = 0;
}
inline double Coordinates::_internal_lon() const {
  return lon_;
}
inline double Coordinates::lon() const {
  // @@protoc_insertion_point(field_get:proto.Coordinates.lon)
  return _internal_lon();
}
inline void Coordinates::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Coordinates::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:proto.Coordinates.lon)
}

// -------------------------------------------------------------------

// Stop

// uint32 id = 1;
inline void Stop::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stop::id() const {
  // @@protoc_insertion_point(field_get:proto.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Stop::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Stop.id)
}

// .proto.Coordinates place = 2;
inline bool Stop::_internal_has_place() const {
  return this != internal_default_instance() && place_ != nullptr;
}
inline bool Stop::has_place() const {
  return _internal_has_place();
}
inline void Stop::clear_place() {
  if (GetArena() == nullptr && place_ != nullptr) {
    delete place_;
  }
  place_ = nullptr;
}
inline const ::proto::Coordinates& Stop::_internal_place() const {
  const ::proto::Coordinates* p = place_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Coordinates&>(
      ::proto::_Coordinates_default_instance_);
}
inline const ::proto::Coordinates& Stop::place() const {
  // @@protoc_insertion_point(field_get:proto.Stop.place)
  return _internal_place();
}
inline void Stop::unsafe_arena_set_allocated_place(
    ::proto::Coordinates* place) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(place_);
  }
  place_ = place;
  if (place) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Stop.place)
}
inline ::proto::Coordinates* Stop::release_place() {
  
  ::proto::Coordinates* temp = place_;
  place_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Coordinates* Stop::unsafe_arena_release_place() {
  // @@protoc_insertion_point(field_release:proto.Stop.place)
  
  ::proto::Coordinates* temp = place_;
  place_ = nullptr;
  return temp;
}
inline ::proto::Coordinates* Stop::_internal_mutable_place() {
  
  if (place_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Coordinates>(GetArena());
    place_ = p;
  }
  return place_;
}
inline ::proto::Coordinates* Stop::mutable_place() {
  // @@protoc_insertion_point(field_mutable:proto.Stop.place)
  return _internal_mutable_place();
}
inline void Stop::set_allocated_place(::proto::Coordinates* place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete place_;
  }
  if (place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(place);
    if (message_arena != submessage_arena) {
      place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, place, submessage_arena);
    }
    
  } else {
    
  }
  place_ = place;
  // @@protoc_insertion_point(field_set_allocated:proto.Stop.place)
}

// -------------------------------------------------------------------

// Route

// string name = 1;
inline void Route::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:proto.Route.name)
  return _internal_name();
}
inline void Route::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.Route.name)
}
inline std::string* Route::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.Route.name)
  return _internal_mutable_name();
}
inline const std::string& Route::_internal_name() const {
  return name_.Get();
}
inline void Route::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Route::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Route.name)
}
inline void Route::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Route.name)
}
inline void Route::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Route.name)
}
inline std::string* Route::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:proto.Route.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Route::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Route.name)
}

// repeated uint32 stop_id = 2;
inline int Route::_internal_stop_id_size() const {
  return stop_id_.size();
}
inline int Route::stop_id_size() const {
  return _internal_stop_id_size();
}
inline void Route::clear_stop_id() {
  stop_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_stop_id(int index) const {
  return stop_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::stop_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.Route.stop_id)
  return _internal_stop_id(index);
}
inline void Route::set_stop_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stop_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Route.stop_id)
}
inline void Route::_internal_add_stop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stop_id_.Add(value);
}
inline void Route::add_stop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stop_id(value);
  // @@protoc_insertion_point(field_add:proto.Route.stop_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Route::_internal_stop_id() const {
  return stop_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Route::stop_id() const {
  // @@protoc_insertion_point(field_list:proto.Route.stop_id)
  return _internal_stop_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Route::_internal_mutable_stop_id() {
  return &stop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Route::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.Route.stop_id)
  return _internal_mutable_stop_id();
}

// bool cycled = 3;
inline void Route::clear_cycled() {
  cycled_ = false;
}
inline bool Route::_internal_cycled() const {
  return cycled_;
}
inline bool Route::cycled() const {
  // @@protoc_insertion_point(field_get:proto.Route.cycled)
  return _internal_cycled();
}
inline void Route::_internal_set_cycled(bool value) {
  
  cycled_ = value;
}
inline void Route::set_cycled(bool value) {
  _internal_set_cycled(value);
  // @@protoc_insertion_point(field_set:proto.Route.cycled)
}

// double direct_length = 4;
inline void Route::clear_direct_length() {
  direct_length_ = 0;
}
inline double Route::_internal_direct_length() const {
  return direct_length_;
}
inline double Route::direct_length() const {
  // @@protoc_insertion_point(field_get:proto.Route.direct_length)
  return _internal_direct_length();
}
inline void Route::_internal_set_direct_length(double value) {
  
  direct_length_ = value;
}
inline void Route::set_direct_length(double value) {
  _internal_set_direct_length(value);
  // @@protoc_insertion_point(field_set:proto.Route.direct_length)
}

// uint32 length = 5;
inline void Route::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::length() const {
  // @@protoc_insertion_point(field_get:proto.Route.length)
  return _internal_length();
}
inline void Route::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void Route::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:proto.Route.length)
}

// double curvature = 6;
inline void Route::clear_curvature() {
  curvature_ = 0;
}
inline double Route::_internal_curvature() const {
  return curvature_;
}
inline double Route::curvature() const {
  // @@protoc_insertion_point(field_get:proto.Route.curvature)
  return _internal_curvature();
}
inline void Route::_internal_set_curvature(double value) {
  
  curvature_ = value;
}
inline void Route::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:proto.Route.curvature)
}

// uint32 unique_stop_count = 7;
inline void Route::clear_unique_stop_count() {
  unique_stop_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_unique_stop_count() const {
  return unique_stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::unique_stop_count() const {
  // @@protoc_insertion_point(field_get:proto.Route.unique_stop_count)
  return _internal_unique_stop_count();
}
inline void Route::_internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_stop_count_ = value;
}
inline void Route::set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_stop_count(value);
  // @@protoc_insertion_point(field_set:proto.Route.unique_stop_count)
}

// -------------------------------------------------------------------

// Distance

// uint32 from = 1;
inline void Distance::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::from() const {
  // @@protoc_insertion_point(field_get:proto.Distance.from)
  return _internal_from();
}
inline void Distance::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void Distance::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:proto.Distance.from)
}

// uint32 to = 2;
inline void Distance::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::to() const {
  // @@protoc_insertion_point(field_get:proto.Distance.to)
  return _internal_to();
}
inline void Distance::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
}
inline void Distance::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:proto.Distance.to)
}

// uint32 meters = 3;
inline void Distance::clear_meters() {
  meters_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::_internal_meters() const {
  return meters_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Distance::meters() const {
  // @@protoc_insertion_point(field_get:proto.Distance.meters)
  return _internal_meters();
}
inline void Distance::_internal_set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meters_ = value;
}
inline void Distance::set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meters(value);
  // @@protoc_insertion_point(field_set:proto.Distance.meters)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated string stop_names = 1;
inline int TransportCatalogue::_internal_stop_names_size() const {
  return stop_names_.size();
}
inline int TransportCatalogue::stop_names_size() const {
  return _internal_stop_names_size();
}
inline void TransportCatalogue::clear_stop_names() {
  stop_names_.Clear();
}
inline std::string* TransportCatalogue::add_stop_names() {
  // @@protoc_insertion_point(field_add_mutable:proto.TransportCatalogue.stop_names)
  return _internal_add_stop_names();
}
inline const std::string& TransportCatalogue::_internal_stop_names(int index) const {
  return stop_names_.Get(index);
}
inline const std::string& TransportCatalogue::stop_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.stop_names)
  return _internal_stop_names(index);
}
inline std::string* TransportCatalogue::mutable_stop_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.stop_names)
  return stop_names_.Mutable(index);
}
inline void TransportCatalogue::set_stop_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:proto.TransportCatalogue.stop_names)
  stop_names_.Mutable(index)->assign(value);
}
inline void TransportCatalogue::set_stop_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.TransportCatalogue.stop_names)
  stop_names_.Mutable(index)->assign(std::move(value));
}
inline void TransportCatalogue::set_stop_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.TransportCatalogue.stop_names)
}
inline void TransportCatalogue::set_stop_names(int index, const char* value, size_t size) {
  stop_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.TransportCatalogue.stop_names)
}
inline std::string* TransportCatalogue::_internal_add_stop_names() {
  return stop_names_.Add();
}
inline void TransportCatalogue::add_stop_names(const std::string& value) {
  stop_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.stop_names)
}
inline void TransportCatalogue::add_stop_names(std::string&& value) {
  stop_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.stop_names)
}
inline void TransportCatalogue::add_stop_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.TransportCatalogue.stop_names)
}
inline void TransportCatalogue::add_stop_names(const char* value, size_t size) {
  stop_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.TransportCatalogue.stop_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransportCatalogue::stop_names() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.stop_names)
  return stop_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransportCatalogue::mutable_stop_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.stop_names)
  return &stop_names_;
}

// repeated .proto.Stop stops = 2;
inline int TransportCatalogue::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  stops_.Clear();
}
inline ::proto::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.stops)
  return &stops_;
}
inline const ::proto::Stop& TransportCatalogue::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::proto::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::proto::Stop* TransportCatalogue::_internal_add_stops() {
  return stops_.Add();
}
inline ::proto::Stop* TransportCatalogue::add_stops() {
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.stops)
  return stops_;
}

// repeated .proto.Distance distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  distances_.Clear();
}
inline ::proto::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.distances)
  return distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.distances)
  return &distances_;
}
inline const ::proto::Distance& TransportCatalogue::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline const ::proto::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::proto::Distance* TransportCatalogue::_internal_add_distances() {
  return distances_.Add();
}
inline ::proto::Distance* TransportCatalogue::add_distances() {
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.distances)
  return _internal_add_distances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.distances)
  return distances_;
}

// repeated .proto.Route routes = 4;
inline int TransportCatalogue::_internal_routes_size() const {
  return routes_.size();
}
inline int TransportCatalogue::routes_size() const {
  return _internal_routes_size();
}
inline void TransportCatalogue::clear_routes() {
  routes_.Clear();
}
inline ::proto::Route* TransportCatalogue::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Route >*
TransportCatalogue::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.routes)
  return &routes_;
}
inline const ::proto::Route& TransportCatalogue::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::proto::Route& TransportCatalogue::routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.routes)
  return _internal_routes(index);
}
inline ::proto::Route* TransportCatalogue::_internal_add_routes() {
  return routes_.Add();
}
inline ::proto::Route* TransportCatalogue::add_routes() {
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Route >&
TransportCatalogue::routes() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.routes)
  return routes_;
}

// .proto.RenderSettings res = 5;
inline bool TransportCatalogue::_internal_has_res() const {
  return this != internal_default_instance() && res_ != nullptr;
}
inline bool TransportCatalogue::has_res() const {
  return _internal_has_res();
}
inline const ::proto::RenderSettings& TransportCatalogue::_internal_res() const {
  const ::proto::RenderSettings* p = res_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RenderSettings&>(
      ::proto::_RenderSettings_default_instance_);
}
inline const ::proto::RenderSettings& TransportCatalogue::res() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.res)
  return _internal_res();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_res(
    ::proto::RenderSettings* res) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res_);
  }
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.res)
}
inline ::proto::RenderSettings* TransportCatalogue::release_res() {
  
  ::proto::RenderSettings* temp = res_;
  res_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::RenderSettings* TransportCatalogue::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.res)
  
  ::proto::RenderSettings* temp = res_;
  res_ = nullptr;
  return temp;
}
inline ::proto::RenderSettings* TransportCatalogue::_internal_mutable_res() {
  
  if (res_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RenderSettings>(GetArena());
    res_ = p;
  }
  return res_;
}
inline ::proto::RenderSettings* TransportCatalogue::mutable_res() {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.res)
  return _internal_mutable_res();
}
inline void TransportCatalogue::set_allocated_res(::proto::RenderSettings* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(res_);
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res)->GetArena();
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.res)
}

// .proto.RoutingSettings rus = 6;
inline bool TransportCatalogue::_internal_has_rus() const {
  return this != internal_default_instance() && rus_ != nullptr;
}
inline bool TransportCatalogue::has_rus() const {
  return _internal_has_rus();
}
inline const ::proto::RoutingSettings& TransportCatalogue::_internal_rus() const {
  const ::proto::RoutingSettings* p = rus_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RoutingSettings&>(
      ::proto::_RoutingSettings_default_instance_);
}
inline const ::proto::RoutingSettings& TransportCatalogue::rus() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.rus)
  return _internal_rus();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_rus(
    ::proto::RoutingSettings* rus) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rus_);
  }
  rus_ = rus;
  if (rus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.rus)
}
inline ::proto::RoutingSettings* TransportCatalogue::release_rus() {
  
  ::proto::RoutingSettings* temp = rus_;
  rus_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::RoutingSettings* TransportCatalogue::unsafe_arena_release_rus() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.rus)
  
  ::proto::RoutingSettings* temp = rus_;
  rus_ = nullptr;
  return temp;
}
inline ::proto::RoutingSettings* TransportCatalogue::_internal_mutable_rus() {
  
  if (rus_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RoutingSettings>(GetArena());
    rus_ = p;
  }
  return rus_;
}
inline ::proto::RoutingSettings* TransportCatalogue::mutable_rus() {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.rus)
  return _internal_mutable_rus();
}
inline void TransportCatalogue::set_allocated_rus(::proto::RoutingSettings* rus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rus_);
  }
  if (rus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rus)->GetArena();
    if (message_arena != submessage_arena) {
      rus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rus, submessage_arena);
    }
    
  } else {
    
  }
  rus_ = rus;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.rus)
}

// .proto.RouteFinderData navigationData = 7;
inline bool TransportCatalogue::_internal_has_navigationdata() const {
  return this != internal_default_instance() && navigationdata_ != nullptr;
}
inline bool TransportCatalogue::has_navigationdata() const {
  return _internal_has_navigationdata();
}
inline const ::proto::RouteFinderData& TransportCatalogue::_internal_navigationdata() const {
  const ::proto::RouteFinderData* p = navigationdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RouteFinderData&>(
      ::proto::_RouteFinderData_default_instance_);
}
inline const ::proto::RouteFinderData& TransportCatalogue::navigationdata() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.navigationData)
  return _internal_navigationdata();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_navigationdata(
    ::proto::RouteFinderData* navigationdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigationdata_);
  }
  navigationdata_ = navigationdata;
  if (navigationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.navigationData)
}
inline ::proto::RouteFinderData* TransportCatalogue::release_navigationdata() {
  
  ::proto::RouteFinderData* temp = navigationdata_;
  navigationdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::RouteFinderData* TransportCatalogue::unsafe_arena_release_navigationdata() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.navigationData)
  
  ::proto::RouteFinderData* temp = navigationdata_;
  navigationdata_ = nullptr;
  return temp;
}
inline ::proto::RouteFinderData* TransportCatalogue::_internal_mutable_navigationdata() {
  
  if (navigationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RouteFinderData>(GetArena());
    navigationdata_ = p;
  }
  return navigationdata_;
}
inline ::proto::RouteFinderData* TransportCatalogue::mutable_navigationdata() {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.navigationData)
  return _internal_mutable_navigationdata();
}
inline void TransportCatalogue::set_allocated_navigationdata(::proto::RouteFinderData* navigationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigationdata_);
  }
  if (navigationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigationdata)->GetArena();
    if (message_arena != submessage_arena) {
      navigationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigationdata, submessage_arena);
    }
    
  } else {
    
  }
  navigationdata_ = navigationdata;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.navigationData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
