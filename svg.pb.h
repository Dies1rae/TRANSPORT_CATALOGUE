// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_svg_2eproto_metadata_getter(int index);
namespace proto {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Color* Arena::CreateMaybeMessage<::proto::Color>(Arena*);
template<> ::proto::Point* Arena::CreateMaybeMessage<::proto::Point>(Arena*);
template<> ::proto::RenderSettings* Arena::CreateMaybeMessage<::proto::RenderSettings>(Arena*);
template<> ::proto::Rgba* Arena::CreateMaybeMessage<::proto::Rgba>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_svg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Rgba PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  virtual ~Rgba();
  explicit constexpr Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rgba* New() const final {
    return CreateMaybeMessage<Rgba>(nullptr);
  }

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rgba& from);
  void MergeFrom(const Rgba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_svg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasOpacityFieldNumber = 1,
    kRFieldNumber = 2,
    kGFieldNumber = 3,
    kBFieldNumber = 4,
    kOpacityFieldNumber = 5,
  };
  // bool hasOpacity = 1;
  void clear_hasopacity();
  bool hasopacity() const;
  void set_hasopacity(bool value);
  private:
  bool _internal_hasopacity() const;
  void _internal_set_hasopacity(bool value);
  public:

  // uint32 r = 2;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 3;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 4;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double opacity = 5;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool hasopacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  double opacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kIsNone = 1,
    kName = 2,
    kRgba = 3,
    DATA_NOT_SET = 0,
  };

  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_svg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNoneFieldNumber = 1,
    kNameFieldNumber = 2,
    kRgbaFieldNumber = 3,
  };
  // bool isNone = 1;
  bool has_isnone() const;
  private:
  bool _internal_has_isnone() const;
  public:
  void clear_isnone();
  bool isnone() const;
  void set_isnone(bool value);
  private:
  bool _internal_isnone() const;
  void _internal_set_isnone(bool value);
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Rgba rgba = 3;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::proto::Rgba& rgba() const;
  ::proto::Rgba* release_rgba();
  ::proto::Rgba* mutable_rgba();
  void set_allocated_rgba(::proto::Rgba* rgba);
  private:
  const ::proto::Rgba& _internal_rgba() const;
  ::proto::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::proto::Rgba* rgba);
  ::proto::Rgba* unsafe_arena_release_rgba();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:proto.Color)
 private:
  class _Internal;
  void set_has_isnone();
  void set_has_name();
  void set_has_rgba();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool isnone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Rgba* rgba_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  virtual ~RenderSettings();
  explicit constexpr RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderSettings* New() const final {
    return CreateMaybeMessage<RenderSettings>(nullptr);
  }

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderSettings& from);
  void MergeFrom(const RenderSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_svg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .proto.Color colorPalette = 12;
  int colorpalette_size() const;
  private:
  int _internal_colorpalette_size() const;
  public:
  void clear_colorpalette();
  ::proto::Color* mutable_colorpalette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >*
      mutable_colorpalette();
  private:
  const ::proto::Color& _internal_colorpalette(int index) const;
  ::proto::Color* _internal_add_colorpalette();
  public:
  const ::proto::Color& colorpalette(int index) const;
  ::proto::Color* add_colorpalette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >&
      colorpalette() const;

  // .proto.Point busLabelOffset = 7;
  bool has_buslabeloffset() const;
  private:
  bool _internal_has_buslabeloffset() const;
  public:
  void clear_buslabeloffset();
  const ::proto::Point& buslabeloffset() const;
  ::proto::Point* release_buslabeloffset();
  ::proto::Point* mutable_buslabeloffset();
  void set_allocated_buslabeloffset(::proto::Point* buslabeloffset);
  private:
  const ::proto::Point& _internal_buslabeloffset() const;
  ::proto::Point* _internal_mutable_buslabeloffset();
  public:
  void unsafe_arena_set_allocated_buslabeloffset(
      ::proto::Point* buslabeloffset);
  ::proto::Point* unsafe_arena_release_buslabeloffset();

  // .proto.Point stopLabelOffset = 9;
  bool has_stoplabeloffset() const;
  private:
  bool _internal_has_stoplabeloffset() const;
  public:
  void clear_stoplabeloffset();
  const ::proto::Point& stoplabeloffset() const;
  ::proto::Point* release_stoplabeloffset();
  ::proto::Point* mutable_stoplabeloffset();
  void set_allocated_stoplabeloffset(::proto::Point* stoplabeloffset);
  private:
  const ::proto::Point& _internal_stoplabeloffset() const;
  ::proto::Point* _internal_mutable_stoplabeloffset();
  public:
  void unsafe_arena_set_allocated_stoplabeloffset(
      ::proto::Point* stoplabeloffset);
  ::proto::Point* unsafe_arena_release_stoplabeloffset();

  // .proto.Color underlayerColor = 10;
  bool has_underlayercolor() const;
  private:
  bool _internal_has_underlayercolor() const;
  public:
  void clear_underlayercolor();
  const ::proto::Color& underlayercolor() const;
  ::proto::Color* release_underlayercolor();
  ::proto::Color* mutable_underlayercolor();
  void set_allocated_underlayercolor(::proto::Color* underlayercolor);
  private:
  const ::proto::Color& _internal_underlayercolor() const;
  ::proto::Color* _internal_mutable_underlayercolor();
  public:
  void unsafe_arena_set_allocated_underlayercolor(
      ::proto::Color* underlayercolor);
  ::proto::Color* unsafe_arena_release_underlayercolor();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double lineWidth = 4;
  void clear_linewidth();
  double linewidth() const;
  void set_linewidth(double value);
  private:
  double _internal_linewidth() const;
  void _internal_set_linewidth(double value);
  public:

  // double stopRadius = 5;
  void clear_stopradius();
  double stopradius() const;
  void set_stopradius(double value);
  private:
  double _internal_stopradius() const;
  void _internal_set_stopradius(double value);
  public:

  // uint32 busLabelFontSize = 6;
  void clear_buslabelfontsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 buslabelfontsize() const;
  void set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buslabelfontsize() const;
  void _internal_set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stopLabelFontSize = 8;
  void clear_stoplabelfontsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 stoplabelfontsize() const;
  void set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stoplabelfontsize() const;
  void _internal_set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double underlayerWidth = 11;
  void clear_underlayerwidth();
  double underlayerwidth() const;
  void set_underlayerwidth(double value);
  private:
  double _internal_underlayerwidth() const;
  void _internal_set_underlayerwidth(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color > colorpalette_;
  ::proto::Point* buslabeloffset_;
  ::proto::Point* stoplabeloffset_;
  ::proto::Color* underlayercolor_;
  double width_;
  double height_;
  double padding_;
  double linewidth_;
  double stopradius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buslabelfontsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stoplabelfontsize_;
  double underlayerwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:proto.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:proto.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Point.y)
}

// -------------------------------------------------------------------

// Rgba

// bool hasOpacity = 1;
inline void Rgba::clear_hasopacity() {
  hasopacity_ = false;
}
inline bool Rgba::_internal_hasopacity() const {
  return hasopacity_;
}
inline bool Rgba::hasopacity() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.hasOpacity)
  return _internal_hasopacity();
}
inline void Rgba::_internal_set_hasopacity(bool value) {
  
  hasopacity_ = value;
}
inline void Rgba::set_hasopacity(bool value) {
  _internal_set_hasopacity(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.hasOpacity)
}

// uint32 r = 2;
inline void Rgba::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::r() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.r)
  return _internal_r();
}
inline void Rgba::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void Rgba::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.r)
}

// uint32 g = 3;
inline void Rgba::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::g() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.g)
  return _internal_g();
}
inline void Rgba::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void Rgba::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.g)
}

// uint32 b = 4;
inline void Rgba::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::b() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.b)
  return _internal_b();
}
inline void Rgba::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void Rgba::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.b)
}

// double opacity = 5;
inline void Rgba::clear_opacity() {
  opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.opacity)
}

// -------------------------------------------------------------------

// Color

// bool isNone = 1;
inline bool Color::_internal_has_isnone() const {
  return data_case() == kIsNone;
}
inline bool Color::has_isnone() const {
  return _internal_has_isnone();
}
inline void Color::set_has_isnone() {
  _oneof_case_[0] = kIsNone;
}
inline void Color::clear_isnone() {
  if (_internal_has_isnone()) {
    data_.isnone_ = false;
    clear_has_data();
  }
}
inline bool Color::_internal_isnone() const {
  if (_internal_has_isnone()) {
    return data_.isnone_;
  }
  return false;
}
inline void Color::_internal_set_isnone(bool value) {
  if (!_internal_has_isnone()) {
    clear_data();
    set_has_isnone();
  }
  data_.isnone_ = value;
}
inline bool Color::isnone() const {
  // @@protoc_insertion_point(field_get:proto.Color.isNone)
  return _internal_isnone();
}
inline void Color::set_isnone(bool value) {
  _internal_set_isnone(value);
  // @@protoc_insertion_point(field_set:proto.Color.isNone)
}

// string name = 2;
inline bool Color::_internal_has_name() const {
  return data_case() == kName;
}
inline bool Color::has_name() const {
  return _internal_has_name();
}
inline void Color::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Color::clear_name() {
  if (_internal_has_name()) {
    data_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& Color::name() const {
  // @@protoc_insertion_point(field_get:proto.Color.name)
  return _internal_name();
}
inline void Color::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.Color.name)
}
inline std::string* Color::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.Color.name)
  return _internal_mutable_name();
}
inline const std::string& Color::_internal_name() const {
  if (_internal_has_name()) {
    return data_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Color::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Color::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.Color.name)
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Color.name)
}
inline void Color::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Color.name)
}
inline void Color::set_name(const char* value,
                             size_t size) {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Color.name)
}
inline std::string* Color::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Color::release_name() {
  // @@protoc_insertion_point(field_release:proto.Color.name)
  if (_internal_has_name()) {
    clear_has_data();
    return data_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Color::set_allocated_name(std::string* name) {
  if (has_data()) {
    clear_data();
  }
  if (name != nullptr) {
    set_has_name();
    data_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Color.name)
}

// .proto.Rgba rgba = 3;
inline bool Color::_internal_has_rgba() const {
  return data_case() == kRgba;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::set_has_rgba() {
  _oneof_case_[0] = kRgba;
}
inline void Color::clear_rgba() {
  if (_internal_has_rgba()) {
    if (GetArena() == nullptr) {
      delete data_.rgba_;
    }
    clear_has_data();
  }
}
inline ::proto::Rgba* Color::release_rgba() {
  // @@protoc_insertion_point(field_release:proto.Color.rgba)
  if (_internal_has_rgba()) {
    clear_has_data();
      ::proto::Rgba* temp = data_.rgba_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Rgba& Color::_internal_rgba() const {
  return _internal_has_rgba()
      ? *data_.rgba_
      : reinterpret_cast< ::proto::Rgba&>(::proto::_Rgba_default_instance_);
}
inline const ::proto::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:proto.Color.rgba)
  return _internal_rgba();
}
inline ::proto::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Color.rgba)
  if (_internal_has_rgba()) {
    clear_has_data();
    ::proto::Rgba* temp = data_.rgba_;
    data_.rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_rgba(::proto::Rgba* rgba) {
  clear_data();
  if (rgba) {
    set_has_rgba();
    data_.rgba_ = rgba;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Color.rgba)
}
inline ::proto::Rgba* Color::_internal_mutable_rgba() {
  if (!_internal_has_rgba()) {
    clear_data();
    set_has_rgba();
    data_.rgba_ = CreateMaybeMessage< ::proto::Rgba >(GetArena());
  }
  return data_.rgba_;
}
inline ::proto::Rgba* Color::mutable_rgba() {
  // @@protoc_insertion_point(field_mutable:proto.Color.rgba)
  return _internal_mutable_rgba();
}

inline bool Color::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Color::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Color::DataCase Color::data_case() const {
  return Color::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  width_ = 0;
}
inline double RenderSettings::_internal_width() const {
  return width_;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.width)
  return _internal_width();
}
inline void RenderSettings::_internal_set_width(double value) {
  
  width_ = value;
}
inline void RenderSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.padding)
}

// double lineWidth = 4;
inline void RenderSettings::clear_linewidth() {
  linewidth_ = 0;
}
inline double RenderSettings::_internal_linewidth() const {
  return linewidth_;
}
inline double RenderSettings::linewidth() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.lineWidth)
  return _internal_linewidth();
}
inline void RenderSettings::_internal_set_linewidth(double value) {
  
  linewidth_ = value;
}
inline void RenderSettings::set_linewidth(double value) {
  _internal_set_linewidth(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.lineWidth)
}

// double stopRadius = 5;
inline void RenderSettings::clear_stopradius() {
  stopradius_ = 0;
}
inline double RenderSettings::_internal_stopradius() const {
  return stopradius_;
}
inline double RenderSettings::stopradius() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stopRadius)
  return _internal_stopradius();
}
inline void RenderSettings::_internal_set_stopradius(double value) {
  
  stopradius_ = value;
}
inline void RenderSettings::set_stopradius(double value) {
  _internal_set_stopradius(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.stopRadius)
}

// uint32 busLabelFontSize = 6;
inline void RenderSettings::clear_buslabelfontsize() {
  buslabelfontsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::_internal_buslabelfontsize() const {
  return buslabelfontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::buslabelfontsize() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.busLabelFontSize)
  return _internal_buslabelfontsize();
}
inline void RenderSettings::_internal_set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  buslabelfontsize_ = value;
}
inline void RenderSettings::set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buslabelfontsize(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.busLabelFontSize)
}

// .proto.Point busLabelOffset = 7;
inline bool RenderSettings::_internal_has_buslabeloffset() const {
  return this != internal_default_instance() && buslabeloffset_ != nullptr;
}
inline bool RenderSettings::has_buslabeloffset() const {
  return _internal_has_buslabeloffset();
}
inline void RenderSettings::clear_buslabeloffset() {
  if (GetArena() == nullptr && buslabeloffset_ != nullptr) {
    delete buslabeloffset_;
  }
  buslabeloffset_ = nullptr;
}
inline const ::proto::Point& RenderSettings::_internal_buslabeloffset() const {
  const ::proto::Point* p = buslabeloffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& RenderSettings::buslabeloffset() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.busLabelOffset)
  return _internal_buslabeloffset();
}
inline void RenderSettings::unsafe_arena_set_allocated_buslabeloffset(
    ::proto::Point* buslabeloffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buslabeloffset_);
  }
  buslabeloffset_ = buslabeloffset;
  if (buslabeloffset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.busLabelOffset)
}
inline ::proto::Point* RenderSettings::release_buslabeloffset() {
  
  ::proto::Point* temp = buslabeloffset_;
  buslabeloffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Point* RenderSettings::unsafe_arena_release_buslabeloffset() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.busLabelOffset)
  
  ::proto::Point* temp = buslabeloffset_;
  buslabeloffset_ = nullptr;
  return temp;
}
inline ::proto::Point* RenderSettings::_internal_mutable_buslabeloffset() {
  
  if (buslabeloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArena());
    buslabeloffset_ = p;
  }
  return buslabeloffset_;
}
inline ::proto::Point* RenderSettings::mutable_buslabeloffset() {
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.busLabelOffset)
  return _internal_mutable_buslabeloffset();
}
inline void RenderSettings::set_allocated_buslabeloffset(::proto::Point* buslabeloffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buslabeloffset_;
  }
  if (buslabeloffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buslabeloffset);
    if (message_arena != submessage_arena) {
      buslabeloffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buslabeloffset, submessage_arena);
    }
    
  } else {
    
  }
  buslabeloffset_ = buslabeloffset;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.busLabelOffset)
}

// uint32 stopLabelFontSize = 8;
inline void RenderSettings::clear_stoplabelfontsize() {
  stoplabelfontsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::_internal_stoplabelfontsize() const {
  return stoplabelfontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::stoplabelfontsize() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stopLabelFontSize)
  return _internal_stoplabelfontsize();
}
inline void RenderSettings::_internal_set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stoplabelfontsize_ = value;
}
inline void RenderSettings::set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stoplabelfontsize(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.stopLabelFontSize)
}

// .proto.Point stopLabelOffset = 9;
inline bool RenderSettings::_internal_has_stoplabeloffset() const {
  return this != internal_default_instance() && stoplabeloffset_ != nullptr;
}
inline bool RenderSettings::has_stoplabeloffset() const {
  return _internal_has_stoplabeloffset();
}
inline void RenderSettings::clear_stoplabeloffset() {
  if (GetArena() == nullptr && stoplabeloffset_ != nullptr) {
    delete stoplabeloffset_;
  }
  stoplabeloffset_ = nullptr;
}
inline const ::proto::Point& RenderSettings::_internal_stoplabeloffset() const {
  const ::proto::Point* p = stoplabeloffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& RenderSettings::stoplabeloffset() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stopLabelOffset)
  return _internal_stoplabeloffset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stoplabeloffset(
    ::proto::Point* stoplabeloffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoplabeloffset_);
  }
  stoplabeloffset_ = stoplabeloffset;
  if (stoplabeloffset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.stopLabelOffset)
}
inline ::proto::Point* RenderSettings::release_stoplabeloffset() {
  
  ::proto::Point* temp = stoplabeloffset_;
  stoplabeloffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Point* RenderSettings::unsafe_arena_release_stoplabeloffset() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.stopLabelOffset)
  
  ::proto::Point* temp = stoplabeloffset_;
  stoplabeloffset_ = nullptr;
  return temp;
}
inline ::proto::Point* RenderSettings::_internal_mutable_stoplabeloffset() {
  
  if (stoplabeloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArena());
    stoplabeloffset_ = p;
  }
  return stoplabeloffset_;
}
inline ::proto::Point* RenderSettings::mutable_stoplabeloffset() {
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.stopLabelOffset)
  return _internal_mutable_stoplabeloffset();
}
inline void RenderSettings::set_allocated_stoplabeloffset(::proto::Point* stoplabeloffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stoplabeloffset_;
  }
  if (stoplabeloffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stoplabeloffset);
    if (message_arena != submessage_arena) {
      stoplabeloffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoplabeloffset, submessage_arena);
    }
    
  } else {
    
  }
  stoplabeloffset_ = stoplabeloffset;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.stopLabelOffset)
}

// .proto.Color underlayerColor = 10;
inline bool RenderSettings::_internal_has_underlayercolor() const {
  return this != internal_default_instance() && underlayercolor_ != nullptr;
}
inline bool RenderSettings::has_underlayercolor() const {
  return _internal_has_underlayercolor();
}
inline void RenderSettings::clear_underlayercolor() {
  if (GetArena() == nullptr && underlayercolor_ != nullptr) {
    delete underlayercolor_;
  }
  underlayercolor_ = nullptr;
}
inline const ::proto::Color& RenderSettings::_internal_underlayercolor() const {
  const ::proto::Color* p = underlayercolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Color&>(
      ::proto::_Color_default_instance_);
}
inline const ::proto::Color& RenderSettings::underlayercolor() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.underlayerColor)
  return _internal_underlayercolor();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayercolor(
    ::proto::Color* underlayercolor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayercolor_);
  }
  underlayercolor_ = underlayercolor;
  if (underlayercolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.underlayerColor)
}
inline ::proto::Color* RenderSettings::release_underlayercolor() {
  
  ::proto::Color* temp = underlayercolor_;
  underlayercolor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Color* RenderSettings::unsafe_arena_release_underlayercolor() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.underlayerColor)
  
  ::proto::Color* temp = underlayercolor_;
  underlayercolor_ = nullptr;
  return temp;
}
inline ::proto::Color* RenderSettings::_internal_mutable_underlayercolor() {
  
  if (underlayercolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Color>(GetArena());
    underlayercolor_ = p;
  }
  return underlayercolor_;
}
inline ::proto::Color* RenderSettings::mutable_underlayercolor() {
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.underlayerColor)
  return _internal_mutable_underlayercolor();
}
inline void RenderSettings::set_allocated_underlayercolor(::proto::Color* underlayercolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete underlayercolor_;
  }
  if (underlayercolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(underlayercolor);
    if (message_arena != submessage_arena) {
      underlayercolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayercolor, submessage_arena);
    }
    
  } else {
    
  }
  underlayercolor_ = underlayercolor;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.underlayerColor)
}

// double underlayerWidth = 11;
inline void RenderSettings::clear_underlayerwidth() {
  underlayerwidth_ = 0;
}
inline double RenderSettings::_internal_underlayerwidth() const {
  return underlayerwidth_;
}
inline double RenderSettings::underlayerwidth() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.underlayerWidth)
  return _internal_underlayerwidth();
}
inline void RenderSettings::_internal_set_underlayerwidth(double value) {
  
  underlayerwidth_ = value;
}
inline void RenderSettings::set_underlayerwidth(double value) {
  _internal_set_underlayerwidth(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.underlayerWidth)
}

// repeated .proto.Color colorPalette = 12;
inline int RenderSettings::_internal_colorpalette_size() const {
  return colorpalette_.size();
}
inline int RenderSettings::colorpalette_size() const {
  return _internal_colorpalette_size();
}
inline void RenderSettings::clear_colorpalette() {
  colorpalette_.Clear();
}
inline ::proto::Color* RenderSettings::mutable_colorpalette(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.colorPalette)
  return colorpalette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >*
RenderSettings::mutable_colorpalette() {
  // @@protoc_insertion_point(field_mutable_list:proto.RenderSettings.colorPalette)
  return &colorpalette_;
}
inline const ::proto::Color& RenderSettings::_internal_colorpalette(int index) const {
  return colorpalette_.Get(index);
}
inline const ::proto::Color& RenderSettings::colorpalette(int index) const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.colorPalette)
  return _internal_colorpalette(index);
}
inline ::proto::Color* RenderSettings::_internal_add_colorpalette() {
  return colorpalette_.Add();
}
inline ::proto::Color* RenderSettings::add_colorpalette() {
  // @@protoc_insertion_point(field_add:proto.RenderSettings.colorPalette)
  return _internal_add_colorpalette();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >&
RenderSettings::colorpalette() const {
  // @@protoc_insertion_point(field_list:proto.RenderSettings.colorPalette)
  return colorpalette_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
